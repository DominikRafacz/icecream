% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ic.R
\name{ic-single-use}
\alias{ic-single-use}
\alias{with_ic_enable}
\alias{with_ic_disable}
\title{\code{with_ic_enable()} and \code{with_ic_disable()}}
\usage{
with_ic_enable(expr)

with_ic_disable(expr)
}
\arguments{
\item{expr}{an  expression containing the `ic()`` function.}
}
\value{
the result of evaluating the expression with the \code{ic()} function
enabled (for \code{with_ic_enable()}) or disabled (for \code{with_ic_disable()}).
After returning this result the \code{ic()} function will remain what it was
before this function ran.
}
\description{
These functions let you evaluate an expression with either \code{ic()} enabled or
disabled without afftecting if \code{ic()} is enabled globally.
}
\section{Functions}{
\itemize{
\item \code{with_ic_enable}: evaluates the expression with \code{ic()} enabled.

\item \code{with_ic_disable}: evaluates the expression with \code{ic()} disabled.
}}

\examples{
ic_enable()
fun <- function(x) {
  ic(x*100)
}

fun(2)                          #returns i ic| `x * 100`: num 200
with_ic_disable(fun(2))         #returns [1] 200
fun(4)                          #returns i ic| `x * 100`: num 400

ic_disable()
fun2 <- function(x) {
  x/100
}

fun2(300)                       #returns [1] 3
ic(fun2(300))                   #returns [1] 3
with_ic_enable(fun2(300))       #returns [1] 3
with_ic_enable(ic(fun2(300)))   #returns i ic| `fun2(300)`: num 3
fun2(500)                       #returns [1] 5

}
